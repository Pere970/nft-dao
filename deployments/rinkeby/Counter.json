{
  "address": "0x4f322720Cb8b86c4f08efEf7Da8F65962a3459fa",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ValueDecremented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ValueIncremented",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "current",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf895786b831e65383d89570e9192405c3b1bb677d78f49f7062dd14d0236c76a",
  "receipt": {
    "to": null,
    "from": "0x6D00f5389eFA17332eC68A90adD23D2d1f2DD7F1",
    "contractAddress": "0x4f322720Cb8b86c4f08efEf7Da8F65962a3459fa",
    "transactionIndex": 2,
    "gasUsed": "265793",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000100000001000000000000000000000000000000000000020000000000000000000800000000004000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000020000040000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x46f98e489aeadebbbbfb90e988def3349d0b5b21f1e9b682ebfacffbe1020b16",
    "transactionHash": "0xf895786b831e65383d89570e9192405c3b1bb677d78f49f7062dd14d0236c76a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10787794,
        "transactionHash": "0xf895786b831e65383d89570e9192405c3b1bb677d78f49f7062dd14d0236c76a",
        "address": "0x4f322720Cb8b86c4f08efEf7Da8F65962a3459fa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d00f5389efa17332ec68a90add23d2d1f2dd7f1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x46f98e489aeadebbbbfb90e988def3349d0b5b21f1e9b682ebfacffbe1020b16"
      }
    ],
    "blockNumber": 10787794,
    "cumulativeGasUsed": "541320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd220f6d2a0bcb1b5a3256ee7713e5d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ValueDecremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ValueIncremented\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"current()\":{\"details\":\"Returns the current value of the counter.\"},\"decrement()\":{\"details\":\"Decrements the counter value by one.\"},\"increment()\":{\"details\":\"Increments the counter value by one.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Changes the owner of the contract.\",\"params\":{\"newAddress\":\"address representing the new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Counter.sol\":\"Counter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Counter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ncontract Counter is Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    /*\\r\\n        State variables\\r\\n    */\\r\\n\\r\\n    Counters.Counter private counter;\\r\\n\\r\\n    /*\\r\\n        Events\\r\\n    */    \\r\\n    event ValueIncremented(uint256 newValue);\\r\\n    event ValueDecremented(uint256 newValue);\\r\\n  \\r\\n    /*\\r\\n        Constructor\\r\\n    */\\r\\n    constructor() {}\\r\\n\\r\\n    /* \\r\\n        Public functions\\r\\n    */\\r\\n\\r\\n    /**\\r\\n     * @dev  Returns the current value of the counter.\\r\\n     */\\r\\n    function current() public view returns (uint256) {\\r\\n        return counter.current();\\r\\n    }\\r\\n\\r\\n    /* \\r\\n        Admin functions\\r\\n    */\\r\\n\\r\\n    /**\\r\\n    * @dev  Changes the owner of the contract.\\r\\n    * @param newAddress address representing the new owner\\r\\n    */\\r\\n    function transferOwnership(address newAddress) public virtual override(Ownable) onlyOwner {\\r\\n        super._transferOwnership(newAddress);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev  Increments the counter value by one.\\r\\n     */\\r\\n    function increment() public onlyOwner {\\r\\n        counter.increment();\\r\\n        emit ValueIncremented(counter.current());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev  Decrements the counter value by one.\\r\\n     */\\r\\n    function decrement() public onlyOwner {\\r\\n        counter.decrement();\\r\\n        emit ValueDecremented(counter.current());\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa36b80ba50588af0d1b04e1afc6c04bcda6e5b7176f6de3c75b7984d0a7f9ff0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103648061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632baeceb714610067578063715018a6146100715780638da5cb5b146100795780639fa6a6e314610099578063d09de08a146100af578063f2fde38b146100b7575b600080fd5b61006f6100ca565b005b61006f610144565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a161017a565b604051908152602001610090565b61006f61018a565b61006f6100c53660046102c9565b6101ec565b6000546001600160a01b031633146100fd5760405162461bcd60e51b81526004016100f4906102f9565b60405180910390fd5b6101076001610222565b7f872c4112b7ea4ffec63c3b641fe385f5297f861b2a3e82054bcbabaf62adc60061013160015490565b60405190815260200160405180910390a1565b6000546001600160a01b0316331461016e5760405162461bcd60e51b81526004016100f4906102f9565b6101786000610279565b565b600061018560015490565b905090565b6000546001600160a01b031633146101b45760405162461bcd60e51b81526004016100f4906102f9565b6101c2600180546001019055565b7fc8a7fc4cfa989096cf36e066e6c623624d76311b81dfc4cb4729dcaa383512de61013160015490565b6000546001600160a01b031633146102165760405162461bcd60e51b81526004016100f4906102f9565b61021f81610279565b50565b8054806102715760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016100f4565b600019019055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102db57600080fd5b81356001600160a01b03811681146102f257600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122053a9dc353d1f747efcfce83b850b0bd44b238c090a1276c5bab27b220007b1a364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632baeceb714610067578063715018a6146100715780638da5cb5b146100795780639fa6a6e314610099578063d09de08a146100af578063f2fde38b146100b7575b600080fd5b61006f6100ca565b005b61006f610144565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6100a161017a565b604051908152602001610090565b61006f61018a565b61006f6100c53660046102c9565b6101ec565b6000546001600160a01b031633146100fd5760405162461bcd60e51b81526004016100f4906102f9565b60405180910390fd5b6101076001610222565b7f872c4112b7ea4ffec63c3b641fe385f5297f861b2a3e82054bcbabaf62adc60061013160015490565b60405190815260200160405180910390a1565b6000546001600160a01b0316331461016e5760405162461bcd60e51b81526004016100f4906102f9565b6101786000610279565b565b600061018560015490565b905090565b6000546001600160a01b031633146101b45760405162461bcd60e51b81526004016100f4906102f9565b6101c2600180546001019055565b7fc8a7fc4cfa989096cf36e066e6c623624d76311b81dfc4cb4729dcaa383512de61013160015490565b6000546001600160a01b031633146102165760405162461bcd60e51b81526004016100f4906102f9565b61021f81610279565b50565b8054806102715760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016100f4565b600019019055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102db57600080fd5b81356001600160a01b03811681146102f257600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122053a9dc353d1f747efcfce83b850b0bd44b238c090a1276c5bab27b220007b1a364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "current()": {
        "details": "Returns the current value of the counter."
      },
      "decrement()": {
        "details": "Decrements the counter value by one."
      },
      "increment()": {
        "details": "Increments the counter value by one."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Changes the owner of the contract.",
        "params": {
          "newAddress": "address representing the new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "contracts/Counter.sol:Counter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8608,
        "contract": "contracts/Counter.sol:Counter",
        "label": "counter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)6691_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_struct(Counter)6691_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 6690,
            "contract": "contracts/Counter.sol:Counter",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}